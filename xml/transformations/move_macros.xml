<?xml version="1.0" encoding="ISO-8859-1"?>
<transformation name="move_macros" last-updated="2007.10.18">

<title>Change prefix in macros</title>

<description>
<p>This transformation allows to modify the prefix of macros.</p>
<p>The motivation for this transformation is to help move whole libraries or source sets from one naming conventioin to another.</p>
<p>Please use this transformation as a boilerplate for your own customized version.</p>
<p>For example, the following file:</p>
<example>
#define BOOST_SOME_MACRO 1
// ...
#ifdef BOOST_SOME_MACRO
// ...
#endif
</example>
<p>will be transformed into:</p>
<example>
#define BOOM_SOME_MACRO 1
// ...
#ifdef BOOM_SOME_MACRO
// ...
#endif
</example>
<p>Note: This transformation actually does not check whether the given identifier is indeed a macro name and the prefix replacement is performed systematically on all identifiers that match.</p>
<p>Note: The transformation is performed in place, which means that the source files are modified.</p>
</description>

<script><![CDATA[# change the prefix in all macros

set oldPrefix "BOOST"
set newPrefix "BOOM"

set oldPrefixLength [string length $oldPrefix]

foreach fileName [getSourceFileNames] {
    set tokens [getTokens $fileName 1 0 -1 -1 {}]
    set newFile [open $fileName "w"]
    foreach token $tokens {
        set tokenValue [lindex $token 0]
        set tokenType [lindex $token 3]
        if {$tokenType == "identifier" && \
                [string compare -length $oldPrefixLength $oldPrefix $tokenValue] == 0} {
            set tokenValue [string replace $tokenValue 0 [expr $oldPrefixLength - 1] $newPrefix]
        }
        puts -nonewline $newFile $tokenValue
    }
    close $newFile
}
]]></script>

<test>
<source><![CDATA[@ test.cpp
#define BOOST_SOME_MACRO 1
// ...
#ifdef BOOST_SOME_MACRO
// ...
#endif
@ test_transformed
#define BOOM_SOME_MACRO 1
// ...
#ifdef BOOM_SOME_MACRO
// ...
#endif
]]></source>
<output-file name="test.cpp" />
</test>
</transformation>
