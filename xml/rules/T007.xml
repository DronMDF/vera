<?xml version="1.0" encoding="ISO-8859-1"?>
<rule name="T007" last-updated="2006.12.19">

<title>Semicolons should not be isolated by spaces or comments from the rest of the code</title>

<description>
<p>The semicolon should not stand isolated by whitespace or comments from the rest of the code.</p>
<example>
int a ;     // bad
int b
;           // bad
int c;      // OK
</example>
<p>As an exception from this rule, semicolons surrounded by spaces are allowed in <code>for</code> loops:</p>
<example>
for ( ; ; ) // OK as an exception
{
    // ...
}
</example>
</description>

<compliance>
<standard name="Inspirel" />
</compliance>

<script><![CDATA[# Semicolons should not be isolated by spaces or comments from the rest of the code

foreach f [getSourceFileNames] {
    foreach t [getTokens $f 1 0 -1 -1 {semicolon}] {
        set line [lindex $t 1]
        set column [lindex $t 2]
        set previousTokens [getTokens $f $line 0 $line $column {}]
        if {$previousTokens == {}} {
            report $f $line "semicolon is isolated from other tokens"
        } else {
            set lastToken [lindex $previousTokens end]
            set lastName [lindex $lastToken 3]
            if {[lsearch {space ccomment} $lastName] != -1} {
                set forTokens [getTokens $f $line 0 $line $column {for leftparen}]
                if {[list [lindex [lindex $forTokens 0] 3] [lindex [lindex $forTokens 1] 3]] != {for leftparen}} {
                    report $f $line "semicolon is isolated from other tokens"
                }
            }
        }
    }
}
]]></script>

<test>

<source><![CDATA[@ test.cpp
void foo()
{
    int a;
    int b ;
    int c
    ;
    return;
    return ;
    return/*x*/;
    for ( ; ; ) {}
}
]]></source>

<result><![CDATA[test.cpp:4: semicolon is isolated from other tokens
test.cpp:6: semicolon is isolated from other tokens
test.cpp:8: semicolon is isolated from other tokens
test.cpp:9: semicolon is isolated from other tokens
]]></result>

</test>
</rule>
