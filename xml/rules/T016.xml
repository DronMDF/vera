<?xml version="1.0" encoding="ISO-8859-1"?>
<rule name="T016" last-updated="2007.11.06">

<title>Calls to min/max should be protected against accidental macro substitution</title>

<description>
<p>The calls to min and max functions should be protected against accidental macro substitution.</p>
<example>
x = max(y, z); // wrong, vulnerable to accidental macro substitution

x = (max)(y, z); // OK

x = max BOOST_PREVENT_MACRO_SUBSTITUTION (y, z); // OK
</example>
</description>

<compliance>
<standard name="Boost" />
</compliance>

<script><![CDATA[# Calls to min/max should be protected against accidental macro substitution

foreach file [getSourceFileNames] {
    foreach identifier [getTokens $file 1 0 -1 -1 {identifier}] {
        set value [lindex $identifier 0]
        if {$value == "min" || $value == "max"} {
            set lineNumber [lindex $identifier 1]
            set columnNumber [expr [lindex $identifier 2] + [string length $value]]
            set restOfLine [string range [getLine $file $lineNumber] $columnNumber end]

            if {[regexp {^[[:space:]]*\(} $restOfLine] == 1} {
                report $file $lineNumber "min/max potential macro substitution problem"
            }
        }
    }
}
]]></script>

<test>

<source><![CDATA[@ test.cpp
x = min(y, z);
x = (min)(y, z);
x = min BOOST_PREVENT_MACRO_SUBSTITUTION (y, z);
x = min<int>(y, z);
struct min : base {};
]]></source>

<result><![CDATA[test.cpp:1: min/max potential macro substitution problem
]]></result>

</test>
</rule>
