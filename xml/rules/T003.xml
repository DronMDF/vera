<?xml version="1.0" encoding="ISO-8859-1"?>
<rule name="T003" last-updated="2006.12.12">

<title>Some keywords should be followed by a single space</title>

<description>
<p>Keywords from the following list:</p>
<ul>
    <li><code>case</code></li>
    <li><code>class</code></li>
    <li><code>delete</code></li>
    <li><code>enum</code></li>
    <li><code>explicit</code></li>
    <li><code>extern</code></li>
    <li><code>goto</code></li>
    <li><code>new</code></li>
    <li><code>struct</code></li>
    <li><code>union</code></li>
    <li><code>using</code></li>
</ul>
<p>should be followed by a single space for better readability.</p>
</description>

<compliance>
<standard name="Inspirel" />
</compliance>

<script><![CDATA[# Some keywords should be followed by a single space

set keywords {
    case
    class
    delete
    enum
    explicit
    extern
    goto
    new
    struct
    union
    using
}

proc isKeyword {s} {
    global keywords
    return [expr [lsearch $keywords $s] != -1]
}

set state "other"
foreach f [getSourceFileNames] {
    foreach t [getTokens $f 1 0 -1 -1 {}] {
        set tokenValue [lindex $t 0]
        set tokenName [lindex $t 3]
        if {$state == "keyword"} {
            if {$tokenName == "space" && $tokenValue == " "} {
                set state "space"
            } else {
                report $f $lineNumber "keyword \'${keywordValue}\' not followed by a single space"
                set state "other"
            }
        } elseif {$state == "space"} {
            if {$tokenName == "newline"} {
                report $f $lineNumber "keyword \'${keywordValue}\' not followed by a single space"                
            }
            set state "other"
        } else {
            if [isKeyword $tokenName] {
                set state "keyword"
                set lineNumber [lindex $t 1]
                set keywordValue [lindex $t 0]
            }
        }
    }
}
]]></script>

<test>

<source><![CDATA[@ test.cpp
using  namespace std;
using namespace std;
class  A { explicit  A(){}};
class B;
struct  S;
struct T;
union  U;
union V;
enum E {a};
enum
F{b};
extern  "C" void foo()
{
    switch (x) {case  5:;}
    switch (x) {case 5:;}
    try{
        A *a = new  A;
        goto  L;
        goto L;
    }catch (A) {}
    delete(p);
}
]]></source>

<result><![CDATA[test.cpp:1: keyword 'using' not followed by a single space
test.cpp:3: keyword 'class' not followed by a single space
test.cpp:3: keyword 'explicit' not followed by a single space
test.cpp:5: keyword 'struct' not followed by a single space
test.cpp:7: keyword 'union' not followed by a single space
test.cpp:10: keyword 'enum' not followed by a single space
test.cpp:12: keyword 'extern' not followed by a single space
test.cpp:14: keyword 'case' not followed by a single space
test.cpp:17: keyword 'new' not followed by a single space
test.cpp:18: keyword 'goto' not followed by a single space
test.cpp:21: keyword 'delete' not followed by a single space
]]></result>

</test>
</rule>
